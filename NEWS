wisp 0.8.0 (2014-11-03):
- the testsuite is defined in terms of the code-tree, not in terms of
  the readable file. Implemented in testrunner.w
- wisp-scheme passes the wisp testsuite
- wisp uses curly-infix by default (srfi-105)
- this is the first full featured release of wisp-scheme: wisp which
  defers all complex parsing to the scheme reader (and match).

wisp 0.6.6 (2014-10-16):
- fix boostrap.

wisp 0.6.5 (2014-10-16):
- use wisp-scheme in the REPL.
- safe dot representation for reading a literal dot (.) for creating improper lists.

wisp 0.6.4 (2014-09-02):
- an actually working wisp implementation for scheme (only) which uses the guile reader. This should be actually correct for scheme. And match-magic ☺
- polishing.

wisp 0.6.1 (2014-08-05):
- simpler unicode handling
- honor --quiet in bootstrapping

wisp 0.6.0 (2014-07-14): 
- Better performance
- Support for SRFI-105
- Working syntax highlighting in export via wisp-mode.el
- Wisp can now execute wisp-files directly via `guile -L . --language=wisp file.w`.
- Icosahedric Advection-Diffusion example: examples/d20world.w
- Draft for an SRFI
- Presentatien: Why Wisp?
- Working autoreconf -i; ./configure; make distcheck
- Real Testsuite (./runtests.sh . .)

wisp 0.5.3 (2014-01-08): Started to use autotools to get make distcheck.

wisp 0.5.2 (2014-01-07): Support general paren-prefixes for macros.

wisp-mode 0.1.5 (2014-01-04): Resolved a name-clash for the emacs wisp-mode together with Steve Purcell und Kris Jenkins: the javascript wisp-mode was renamed to wispjs-mode and wisp.el is called wisp-mode 0.1.5. It provides syntax highlighting for Emacs and minimal indentation support via tab. You can install it with `M-x package-install wisp-mode`

wisp 0.5 (2013-09-13): Wisp now has a REPL! Thanks go to GNU Guile and especially Mark Weaver, who guided me through the process (along with nalaginrut who answered my first clueless questions…).
    To test the REPL, get the current code snapshot, unpack it, run ./bootstrap.sh, start guile with $ guile -L . (requires guile 2.x) and enter ,language wisp.
    Example usage:

        display "Hello World!\n"

    then hit enter thrice.
    Voilà, you have wisp at the REPL!
    Caveeat: the wisp-parser is still experimental and contains known bugs. Use it for testing, but please do not rely on it for important stuff, yet.

wisp 0.4 (2013-09-10): wisp-guile.w can now parse itself! Bootstrapping: The magical feeling of seeing a language (dialect) grow up to live by itself: python3 wisp.py wisp-guile.w > 1 && guile 1 wisp-guile.w > 2 && guile 2 wisp-guile.w > 3 && diff 2 3. Starting today, wisp is implemented in wisp.
