wisp ():
- 

wisp 0.9.1:
- examples/d20world.w: implement basic plotting on a map.
- more of the examples use the guile reader by default
- examples/wisp.w: syntax for a with keyword
  which works like with in Python
- wisp-mode: add indentation cycling patch
  thanks to Kevin W. van Rooijen
- Use GUILE_PKG instead of PKG_CHECK_MODULES
  thanks to Jan Wedekind
- "make install" adds the wisp language to Guile
  thanks to Jan Wedekind
- wisp-mode: start working on better indentation
- examples/d6.w: add critical rolls
- add examples/securepassword.w
- add enter three witches: minimum overhead for a theater script
- fix factorial code
- add slides for FOSDEM 2016 talk
- add ensemble estimation
- add running mean, say and async
- improve handling of "` , :" (incomplete, see bug e44)
- unescape up to 6 leading underscores (fix bug 31)
- use GUILE_PROGS to check for guile instead of using homegrown stuff
- fix multiline string bug when the string includes \"
  tracked down by Michael Lamb
- new example: say.w (companion to
  http://draketo.de/english/wisp/shakespeare )
- always use /usr/bin/env bash as hashbang for shell scripts.

wisp 0.9.0 (2015-09-24):
- actually distribute wisp.scm
- wisp now starts from wisp.scm. To bootstrap a release from Python, 
  remove wisp.scm and run `make wisp.scm`
  starting with 0.9.0, installing wisp no longer depends on Python.

wisp 0.8.7 (2015-09-24):
- new example say.w, companion to 
- bootstrap now explicitly requires bash
- include wisp.scm in the tarball to allow for pure-guile bootstrapping.
- spec: handle locale errors more gracefully
- improve readme

wisp 0.8.6 (2015-09-12):
- wisp-scheme.w allows ending a chunk with a trailing period.  This
  syntax is reserved for future use in SRFI-119, so you should not
  rely on this in production code.  It is mainly intended as REPL
  feature to avoid visual clutter while running single lines, like
  quick calculations.
- new examples: cholesky decomposition, symmetric matrix, closure,
  hoist-in-loop (cps transformation transcoded to wisp).
- updated examples: evolve.w
- clearer bootstrap output

wisp 0.8.5 (2015-07-28):
- wisp-scheme.w now parses : . to nothing. The colon adds parens, the
  dot removes them. This provides compatibility to the older parser.
- wisp is now SRFI-119: http://srfi.schemers.org/srfi-119/srfi-119.html

wisp 0.8.4 (2015-06-23):
- no longer wrap wisp blocks into begin. Fixes missing macro
  definitions when executed as file.
- any top-level form ends a wisp block. Required to avoid wrapping in
  begin. In the REPL code is now executed when entering the first line
  of the next top-level form.
- new examples: newbase60 and cli.
- known issue: To execute a procedure with shell-indirection, you have
  to define a module.
- wisp-mode: disable electric-indent-mode which reindented lines
  wrongly when pressing enter.

wisp 0.8.3 (2015-04-10):
- add partial source-properties support: show line numbers in backtraces.
- d20world: start of experiement to plot the results.

wisp 0.8.2 (2015-03-18):
- resolve REPL delayed output bug.
- forbid dot at the end of a line and as only symbol in a line to reserve them for future use.
- generalized the shell-call to guile: It gets the parentdir from $0.
- note curly braces, neoteric expressions and dual-wisp-sweet syntax.
- added tests: sxml, self-referencial function, curly-infix.
- new example: beautiful factorial.
- new example: ensemble estimation with ensemble square root filter. Uses python driven by an output-pipe as a plotting tool.
- SRFI 119 in draft.

wisp 0.8.1 (2014-11-19):
- srfi: polish implementation notes.
- add the requirements to the syntax-examples.
- wisp-scheme.w works completely again.

wisp 0.8.0 (2014-11-03):
- the testsuite is defined in terms of the code-tree, not in terms of
  the readable file. Implemented in testrunner.w
- wisp-scheme passes the wisp testsuite
- wisp uses curly-infix by default (srfi-105)
- this is the first full featured release of wisp-scheme: wisp which
  defers all complex parsing to the scheme reader (and match).

wisp 0.6.6 (2014-10-16):
- fix boostrap.

wisp 0.6.5 (2014-10-16):
- use wisp-scheme in the REPL.
- safe dot representation for reading a literal dot (.) for creating improper lists.

wisp 0.6.4 (2014-09-02):
- an actually working wisp implementation for scheme (only) which uses the guile reader. This should be actually correct for scheme. And match-magic ☺
- polishing.

wisp 0.6.1 (2014-08-05):
- simpler unicode handling
- honor --quiet in bootstrapping

wisp 0.6.0 (2014-07-14): 
- Better performance
- Support for SRFI-105
- Working syntax highlighting in export via wisp-mode.el
- Wisp can now execute wisp-files directly via `guile -L . --language=wisp file.w`.
- Icosahedric Advection-Diffusion example: examples/d20world.w
- Draft for an SRFI
- Presentatien: Why Wisp?
- Working autoreconf -i; ./configure; make distcheck
- Real Testsuite (./runtests.sh . .)

wisp 0.5.3 (2014-01-08): Started to use autotools to get make distcheck.

wisp 0.5.2 (2014-01-07): Support general paren-prefixes for macros.

wisp-mode 0.1.5 (2014-01-04): Resolved a name-clash for the emacs wisp-mode together with Steve Purcell und Kris Jenkins: the javascript wisp-mode was renamed to wispjs-mode and wisp.el is called wisp-mode 0.1.5. It provides syntax highlighting for Emacs and minimal indentation support via tab. You can install it with `M-x package-install wisp-mode`

wisp 0.5 (2013-09-13): Wisp now has a REPL! Thanks go to GNU Guile and especially Mark Weaver, who guided me through the process (along with nalaginrut who answered my first clueless questions…).
    To test the REPL, get the current code snapshot, unpack it, run ./bootstrap.sh, start guile with $ guile -L . (requires guile 2.x) and enter ,language wisp.
    Example usage:

        display "Hello World!\n"

    then hit enter thrice.
    Voilà, you have wisp at the REPL!
    Caveeat: the wisp-parser is still experimental and contains known bugs. Use it for testing, but please do not rely on it for important stuff, yet.

wisp 0.4 (2013-09-10): wisp-guile.w can now parse itself! Bootstrapping: The magical feeling of seeing a language (dialect) grow up to live by itself: python3 wisp.py wisp-guile.w > 1 && guile 1 wisp-guile.w > 2 && guile 2 wisp-guile.w > 3 && diff 2 3. Starting today, wisp is implemented in wisp.
